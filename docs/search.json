{
  "articles": [
    {
      "path": "about.html",
      "title": "Wooram Seong(성우람)",
      "author": [],
      "contents": "\n\n          \n          \n          \n          \n          Homepage\n          \n          \n          Home\n          My Info\n          Portfolio\n          \n          \n          Study Note\n           \n          ▾\n          \n          \n          Linear Regression\n          Non parametric method\n          Time series\n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          ☰\n          \n          \n      \n        \n          \n            \n              \n            \n              Wooram Seong(성우람)\n            \n            \n              \n                \n                    \n                      \n                        Naver\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Instagram\n                      \n                    \n                  \n                                    \n                    \n                      \n                        GitHub\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Email\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            \n            Self-Introduction\n            I am an actuarial student studying at Sungkyunkwan University from Korea.I’m in the second year on the way to a master’s degree.\n            I love talking about HipHop, Jazz, and DJing.\n            \n            \n            Education\n            Daejeon High School / 2009~2011\n            Sungkyunkwan University / 2013~2019\n            SGH Warsaw school of Economics / 2018 (Exchange Student)Sungkyunkwan graduate school / 2020~\n            \n            \n            I’m Traveler\n            Taiwan, China, Japan, Thailand, Indonesia, Vietnam, Spain, France, Italy, IBIZA(?_?), Poland, United Kingdom, Czech, Austria, Croatia, Hungary, Egypt\n            \n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Wooram Seong(성우람)\n            \n            \n              \n                \n                                    \n                    \n                      Naver\n                    \n                  \n                                    \n                    \n                      Instagram\n                    \n                  \n                                    \n                    \n                      GitHub\n                    \n                  \n                                    \n                    \n                      Email\n                    \n                  \n                                  \n              \n            \n            \n              \n              Self-Introduction\n              I am an actuarial student studying at Sungkyunkwan University from Korea.I’m in the second year on the way to a master’s degree.\n              I love talking about HipHop, Jazz, and DJing.\n              \n              \n              Education\n              Daejeon High School / 2009~2011\n              Sungkyunkwan University / 2013~2019\n              SGH Warsaw school of Economics / 2018 (Exchange Student)Sungkyunkwan graduate school / 2020~\n              \n              \n              I’m Traveler\n              Taiwan, China, Japan, Thailand, Indonesia, Vietnam, Spain, France, Italy, IBIZA(?_?), Poland, United Kingdom, Czech, Austria, Croatia, Hungary, Egypt\n              \n            \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2021-03-02T05:42:50+00:00"
    },
    {
      "path": "AmesHousing.html",
      "title": "Data Analysis(AmesHosuing)",
      "author": [],
      "contents": "\n필요 라이브러리 모음\n\n\nlibrary(\"AmesHousing\")\nlibrary(\"tidyverse\")\nlibrary(\"rmarkdown\")\n\n\n\nInsight 1\nNorthRidge, NorthRigde Heights 동네는 서울의 성북동과 같이 소수의 부자들이 살고 있는 곳으로 보인다.\n\n\n\n\n 전체 집의 판매가격 분포\n\n\n지역별 집의 평균 판매가격은 다음과 같다.\n\n\n# A tibble: 10 x 2\n   Neighborhood SalePrice_mean\n   <chr>                 <dbl>\n 1 NoRidge             330319.\n 2 StoneBr             324229.\n 3 NridgHt             322018.\n 4 GrnHill             280000 \n 5 Veenker             248315.\n 6 Timber              246600.\n 7 Somerst             229707.\n 8 ClearCr             208662.\n 9 Crawfor             207551.\n10 CollgCr             201803.\n\n\n다음은 1~10위 평균 판매가격을 가진 지역들의 Boxplot이다.\n\n\n\n\n 상위 10개 평균 판매가격 지역의 Boxplot\n\n\n\n\n\nNorthRidge 동네가 평균 판매가격이 가장 높다. (마름모가 평균을 의미한다.)\n평균 판매가격이 2위인 Stone Brook보다 중간값은 낮지만 Outlier들로 인해 평균 판매가격을 1위를 하게 됐다.\nNorthRidge Heights도 Outlier가 높은 편에 속한다.\nInsight 2\n판매가격을 종속변수로 잡고 다른 항목들을 독립변수로 대입해본 결과 Overall Qual 항 목이 제일 연관성이 높았다. (R^2 높게 산출됨.)\nOverall Qual 과 Overall Cond 에 대한 ANOVA 실행결과 :\n\n\nCall:\nlm(formula = SalePrice ~ `Overall Cond`, data = ames_raw)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-194050  -49391  -17638   30088  577397 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      221457       7496  29.544  < 2e-16 ***\n`Overall Cond`    -7309       1321  -5.532 3.45e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 79490 on 2928 degrees of freedom\nMultiple R-squared:  0.01034,   Adjusted R-squared:   0.01 \nF-statistic:  30.6 on 1 and 2928 DF,  p-value: 3.453e-08\n\nCall:\nlm(formula = SalePrice ~ `Overall Qual`, data = ames_raw)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-197507  -29254   -2283   21658  397493 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    -95003.6     3933.8  -24.15   <2e-16 ***\n`Overall Qual`  45251.0      628.8   71.96   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 48020 on 2928 degrees of freedom\nMultiple R-squared:  0.6388,    Adjusted R-squared:  0.6387 \nF-statistic:  5179 on 1 and 2928 DF,  p-value: < 2.2e-16\n\nOverall Qual 이 상대적으로 높은 R^2(0.6388)값과 작은 p-value가 산출됨\n\n\n\n\n Linear Method \n\n\n그래프 상으로도 높은 상관관계를 보임\n\n(이외에 다양한 변수들에 대하여 실험을 진행해봤으나 Overall Qual이 압도적이다.)\n\n# A tibble: 10 x 2\n   Neighborhood MeanQual\n   <chr>           <dbl>\n 1 StoneBr          8.37\n 2 NridgHt          8.28\n 3 NoRidge          7.93\n 4 Somerst          7.40\n 5 Veenker          7.21\n 6 Timber           7.19\n 7 GrnHill          7   \n 8 CollgCr          6.68\n 9 Crawfor          6.27\n10 ClearCr          5.98\n[1] 6.094881\n\n\n▲평균 Overall Qual\n\n\n\n\n평균 Overall Qual를 기준으로 상위 10개 지역을 산출해보았다. 평균 집 판매가격 순위와 비슷하게 산출됨을 알 수 있다. 당연한 결과였다.\n상위 5개 지역은 평균 Overall Qual 상회하고 있다.\n\n\n\n\n 상위 10개 평균 Overall Qual를 갖는 지역의 Boxplot\n\n\n\n\n\nInsight 1에서와 같이 North Ridge는 Outlier의 결과가 많이 나온다.\nGreen Hills는 평균과 중간값이 같다. (지역 내 집이 2 채 밖에 없다.)\nInsight 3\n지붕 재료는 집들 중 98.53%(2930개의 집 중 2887개) 가 Standard Shingle을 사용했으나, 유독 Clear Creek 지역은 약 73%만 Standard Shingle을 사용하고, 나머지는 다른 지붕재료를 사용\n\n# A tibble: 8 x 2\n  `Roof Matl`     n\n* <chr>       <int>\n1 ClyTile         1\n2 CompShg      2887\n3 Membran         1\n4 Metal           1\n5 Roll            1\n6 Tar&Grv        23\n7 WdShake         9\n8 WdShngl         7\n\n▲ 지붕 재료 분포(Roof Matl)\n\n\n\n\n 집이 50개 이하로 있는 지역들의 지붕 재료 분포.\n\n\n유독 Clear Creek 지역만 다양한 지붕 재료를 가지는 것을 알 수 있다.\n\n\n\n# A tibble: 7 x 3\n# Groups:   \"Roof Matl\" [1]\n  `\"Roof Matl\"` Neighborhood     n\n  <chr>         <chr>        <int>\n1 Roof Matl     ClearCr          7\n2 Roof Matl     Edwards          5\n3 Roof Matl     NAmes            7\n4 Roof Matl     Sawyer           1\n5 Roof Matl     SawyerW          1\n6 Roof Matl     SWISU            1\n7 Roof Matl     Timber           1\n# A tibble: 5 x 3\n# Groups:   \"Roof Matl\" [1]\n  `\"Roof Matl\"` Neighborhood     n\n  <chr>         <chr>        <int>\n1 Roof Matl     ClearCr          1\n2 Roof Matl     NAmes            2\n3 Roof Matl     NoRidge          1\n4 Roof Matl     NWAmes           3\n5 Roof Matl     Timber           2\n# A tibble: 6 x 3\n# Groups:   \"Roof Matl\" [1]\n  `\"Roof Matl\"` Neighborhood     n\n  <chr>         <chr>        <int>\n1 Roof Matl     ClearCr          2\n2 Roof Matl     NAmes            1\n3 Roof Matl     NoRidge          1\n4 Roof Matl     NWAmes           1\n5 Roof Matl     OldTown          1\n6 Roof Matl     Veenker          1\n\n▲ 지붕 재료에 따른 지역 분포(Tar&Grv, Wdshake, Wdshangl)\nClear Creek 지역은 각 재료를 골고루 가지고 있다.\n\n\n\n\n Clear Creek 지역의 지붕 재료 분포.\n\n\n\n\n\nInsight 4\nFence 가 Minimum Wood/Wire 인 경우는 대부분 North Ames에 속했다.(총 12 건중 9건)\n\n\n\n Fence 유형에 따른 지역 분포.\n\n\nMnWw 항목은 다른 항목과 달리 같은 색깔의 점(Names)들이 모여 있다.\n\n이제 Fence가 MnWw인 지역들을 파악해보자.\n\n# A tibble: 12 x 2\n   Neighborhood Fence\n   <chr>        <chr>\n 1 OldTown      MnWw \n 2 OldTown      MnWw \n 3 NAmes        MnWw \n 4 NAmes        MnWw \n 5 BrkSide      MnWw \n 6 NAmes        MnWw \n 7 NAmes        MnWw \n 8 NAmes        MnWw \n 9 NAmes        MnWw \n10 NAmes        MnWw \n11 NAmes        MnWw \n12 NAmes        MnWw \n\n\nFence가 MnWw인 경우는 총 12건이고, 그 중 9 건이 North Ames이다.\n\n\n\n\n\n 집이 100 채 이상인 지역들의 집 개수 .\n\n\n비록 North Ames 지역에 집이 가장 많이 있더라도, MnWw는 지역들의 집 개수 순위와 비례하지 않음을 알 수 있다.\n\n\n그 외\n최근에 지어지거나, 리모델링한 집일 수록 판매가격이 높다.\n\n# A tibble: 28 x 3\n   Neighborhood YearMean  SPMean\n   <chr>           <dbl>   <dbl>\n 1 NridgHt         2006. 322018.\n 2 Blmngtn         2005. 196662.\n 3 Somerst         2005. 229707.\n 4 StoneBr         2000. 324229.\n 5 CollgCr         1999. 201803.\n 6 Gilbert         1999. 190647.\n 7 Timber          1997. 246600.\n 8 NoRidge         1997. 330319.\n 9 Landmrk         1994  137000 \n10 SawyerW         1993. 184070.\n# … with 18 more rows\n\nYear Remod/Add를 평균하여 내림차순으로 정렬해 SalePrice와의 연관성을 알아보려 했지만 관계가 잘 나타나지 않았다.\n\n\nCall:\nlm(formula = SalePrice ~ `Year Remod/Add`, data = ames_raw)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-167033  -39851   -8530   25769  552296 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      -3.869e+06  1.188e+05  -32.56   <2e-16 ***\n`Year Remod/Add`  2.041e+03  5.988e+01   34.08   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 67610 on 2928 degrees of freedom\nMultiple R-squared:  0.2841,    Adjusted R-squared:  0.2838 \nF-statistic:  1162 on 1 and 2928 DF,  p-value: < 2.2e-16\n\n\n\n Linear Method .\n\n\n\n\nLinear method를 통해 상관 관계가 있는 것을 발견하였다.\n하지만 Year ReMod/Add 는 Insight 2의 Overall Qual에 비해 R^2 값도 낮고 상관관계가 크지도 않았다.\n실수 목록들\n띄어쓰기된 열이름에 mean이 적용되지 않아서 이름을 변경함.\nex) Year Remod/Add -> FinalYear /\n`을 ’ 로 착각해서 이런 오류가 발생하였고, 띄어쓰기는 상관 없었다.\n\n\n\n",
      "last_modified": "2021-03-11T03:32:22+00:00"
    },
    {
      "path": "citations.html",
      "title": "Rammon's Portfolio",
      "author": [],
      "contents": "\nBermuda Option\nCase <- 100 시나리오 갯수Ini.Stock<-100 초기 주가StrikePrice<-100 옵션 행사 가격year<- 10 년도unit<- 12 단위 (12: 12개월, 365, 365일)interval <- year X unit (구간의 갯수)t <- 1/unit 년도를 구간으로 나눠준 수  r <-0.03sigma<-0.2mu <- r-0.5 X sigma^2Bermuda.Start <- 50Bermuda.End <- 110 버뮤다의 마지막 구간은 interval과 같거나 작아야함.\n\n\nBermuda_option <-function(CallorPut,Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (CallorPut == 1){  \n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n      }}} else if (CallorPut == 2){\n        for (i in 1:Case) {\n          for (j in 1:interval) {\n            \n            Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n            Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n          }}} else { print(\"Call =1 , Put =2 로 설정해주셔야 합니다.\")\n          }\n  \n  \n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) { \n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])\n      \n    }  \n    value<-mean(Bermuda.table[,1])\n  }  else {value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\n\n\n\nBermuda_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \nset.seed(5)\n\nrnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n\nYield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\nPayoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\nBermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n\nif (Bermuda.End>0 & Bermuda.End<=interval){\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n  value<-mean(Bermuda.table[,1])\n} else {\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }}\n  value<-mean(Payoff.table[,interval])\n}\n\n\nreturn(value)\n}\n\nBermuda_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }\n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n    value<-mean(Bermuda.table[,1])\n  } else {\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }}\n    value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\nEuropean_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n\n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nEuropean_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n  \n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nBermuda_option(3,100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] \"Call =1 , Put =2 로 설정해주셔야 합니다.\"\n[1] 0\n\nBermuda_option(2,100,100,100,5,12,0.02,0.1,0,0)\n\n\n[1] 2.920645\n\nBermuda_option(1,100,100,80,5,12,0.03,0.1,0,0)\n\n\n[1] 33.56165\n\nBermuda_callop(100,100,80,5,12,0.02,0.2,20,40)\n\n\n[1] 54.56337\n\nBermuda_putop(100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] 4.413762\n\nEuropean_callop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 11.41853\n\nEuropean_putop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 4.413762\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\nIf you want to get the plots about bermuda options, Write this down.\nresult.table.r<-c(1:100) result.table.sigma<-c(1:100) result.table.StrikePrice<-c(1:100) result.table.r2<-c(1:100) result.table.sigma2<-c(1:100) result.table.StrikePrice2<-c(1:100) sample.r<- seq(0.01,0.03,length.out = 100) sample.sigma<-seq(0.1,0.3,length.out = 100) sample.StrikePrice<-seq(80,120,length.out = 100)\nfor (i in 1:100) { result.table.r[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,20,40) result.table.sigma[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],20,40) result.table.StrikePrice[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,20,40) result.table.r2[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,0,0) result.table.sigma2[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],0,0) result.table.StrikePrice2[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,0,0)\n}\nplot(sample.r,result.table.r,type = “l”,col=“red”,xlab = “무위험이자율”,ylab=“콜옵션 가격”,xlim=c(0.009,0.031),ylim=c(10,50)) lines(sample.r,result.table.r2,type = “l”) legend(0.026,48,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.sigma,result.table.sigma,type = “l”,col=“red”,xlab = “표준편차(시그마)”,ylab=“콜옵션 가격”,xlim=c(0.05,0.40),ylim=c(10,50)) lines(sample.sigma,result.table.sigma2,type = “l”) legend(0.32,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.StrikePrice,result.table.StrikePrice,type = “l”,col=“red”,xlab = “행사가격”,ylab=“콜옵션 가격”,xlim=c(75,125),ylim=c(10,50)) lines(sample.StrikePrice,result.table.StrikePrice2) legend(114,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nNPV Function with Tax (Monte carlo Simulation)\nInitial Investment = ICASHFLOW before tax = CFGrowth rate = GTax rate = T Cost of Captial = CPeriod = N\n\n\nlibrary(\"dplyr\")\n\nNPVRAM <-function(I,CF,G,T,C,N) {\n  PVCF = 0 \n  ACF= CF*(1-T)  ##After tax cash flow\n  for(i in 1:N){\n    PVCF[i]<-ACF*(1+G)^(i-1) / (1+C)^i \n  }\n  \n  sum(PVCF)-I}\n\n### Monte Function ###\n  \nMonte <- function(PROB,RV) {if(PROB<=0.25){\n    return(RV[1])}\n    else if(PROB<=0.75) {\n      return(RV[2])\n    }\n    else  { \n      return(RV[3])\n    }}      \n\n  \n\nNPVRAM(5000000,1000000,0.03,0.25,0.06,10)\n\n\n[1] 1239103\n\nA<-c(5500000,5000000,4500000)\nB<-c(900000,1000000,1100000)\nC<-c(0.02,0.03,0.04)\nD<-c(0.35,0.25,0.15)\nE<-c(0.07,0.06,0.05)\nF<-c(8,10,12)\n\n\nResult<-0\n\n\n### NPVMONTE function ###\n\n\nNPVMONTE <- function(x) {\n          \n                            NPV1<-c(1:x)  \n            for(i in 1:x){\n                       \n                         I1<-Monte(runif(1),A)\n                         CF1<-Monte(runif(1),B)\n                         G1<-Monte(runif(1),C)\n                         T1<-Monte(runif(1),D)\n                         C1<-Monte(runif(1),E)\n                         N1<-Monte(runif(1),F)\n      NPV1[i] <- NPVRAM(I1,CF1,G1,T1,C1,N1)                   \n      }\n return(NPV1) \n}\n\nResult1<-NPVMONTE(10000)\nmean(Result1)  ## NPV ???հ?\n\n\n[1] 1224460\n\nvar(Result1)   ## NPV var ??\n\n\n[1] 1.331364e+12\n\nResult1<-as.data.frame(Result1)\ncolnames(Result1) <- \"NPV\"\nResult1<-arrange(Result1,NPV)\nPositive<- filter(Result1,NPV>0)  \nnrow(Positive)/nrow(Result1)     ## NPV ?? ?????? Ȯ?? ##\n\n\n[1] 0.8519\n\nAM<- filter(Result1,NPV>1000000) ## Above  1Million\nBM<- filter(Result1,NPV<1000000) ## Below  1Million\nnrow(AM)/nrow(Result1)   ## NPV 1,000,000 ?ʰ??? Ȯ??\n\n\n[1] 0.5492\n\nnrow(BM)/nrow(Result1)   ## NPV 1,000,000 ?̸??? Ȯ??\n\n\n[1] 0.4508\n\nResult1[100,1]   ## 1  percentile ##\n\n\n[1] -1091259\n\nResult1[1000,1]  ## 10 percentile ##\n\n\n[1] -209591.2\n\nResult1[9000,1]  ## 90 percentile ##\n\n\n[1] 2786013\n\n\n\n\n",
      "last_modified": "2021-03-11T03:32:22+00:00"
    },
    {
      "path": "index.html",
      "title": "Rammon's Github",
      "description": "Welcome to my website. I hope you enjoy it!",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-03-02T05:41:21+00:00"
    },
    {
      "path": "NPM.html",
      "title": "Non-parametric method",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-03-02T05:27:42+00:00"
    },
    {
      "path": "portfolio.html",
      "title": "Rammon's Portfolio",
      "author": [],
      "contents": "\nBermuda Option\nCase <- 100 시나리오 갯수Ini.Stock<-100 초기 주가StrikePrice<-100 옵션 행사 가격year<- 10 년도unit<- 12 단위 (12: 12개월, 365, 365일)interval <- year X unit (구간의 갯수)t <- 1/unit 년도를 구간으로 나눠준 수  r <-0.03sigma<-0.2mu <- r-0.5 X sigma^2Bermuda.Start <- 50Bermuda.End <- 110 버뮤다의 마지막 구간은 interval과 같거나 작아야함.\n\n\nBermuda_option <-function(CallorPut,Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (CallorPut == 1){  \n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n      }}} else if (CallorPut == 2){\n        for (i in 1:Case) {\n          for (j in 1:interval) {\n            \n            Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n            Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n          }}} else { print(\"Call =1 , Put =2 로 설정해주셔야 합니다.\")\n          }\n  \n  \n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) { \n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])\n      \n    }  \n    value<-mean(Bermuda.table[,1])\n  }  else {value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\n\n\n\nBermuda_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \nset.seed(5)\n\nrnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n\nYield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\nPayoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\nBermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n\nif (Bermuda.End>0 & Bermuda.End<=interval){\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n  value<-mean(Bermuda.table[,1])\n} else {\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }}\n  value<-mean(Payoff.table[,interval])\n}\n\n\nreturn(value)\n}\n\nBermuda_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }\n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n    value<-mean(Bermuda.table[,1])\n  } else {\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }}\n    value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\nEuropean_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n\n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nEuropean_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n  \n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nBermuda_option(3,100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] \"Call =1 , Put =2 로 설정해주셔야 합니다.\"\n[1] 0\n\nBermuda_option(2,100,100,100,5,12,0.02,0.1,0,0)\n\n\n[1] 2.920645\n\nBermuda_option(1,100,100,80,5,12,0.03,0.1,0,0)\n\n\n[1] 33.56165\n\nBermuda_callop(100,100,80,5,12,0.02,0.2,20,40)\n\n\n[1] 54.56337\n\nBermuda_putop(100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] 4.413762\n\nEuropean_callop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 11.41853\n\nEuropean_putop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 4.413762\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\nIf you want to get the plots about bermuda options, Write this down.\nresult.table.r<-c(1:100) result.table.sigma<-c(1:100) result.table.StrikePrice<-c(1:100) result.table.r2<-c(1:100) result.table.sigma2<-c(1:100) result.table.StrikePrice2<-c(1:100) sample.r<- seq(0.01,0.03,length.out = 100) sample.sigma<-seq(0.1,0.3,length.out = 100) sample.StrikePrice<-seq(80,120,length.out = 100)\nfor (i in 1:100) { result.table.r[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,20,40) result.table.sigma[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],20,40) result.table.StrikePrice[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,20,40) result.table.r2[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,0,0) result.table.sigma2[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],0,0) result.table.StrikePrice2[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,0,0)\n}\nplot(sample.r,result.table.r,type = “l”,col=“red”,xlab = “무위험이자율”,ylab=“콜옵션 가격”,xlim=c(0.009,0.031),ylim=c(10,50)) lines(sample.r,result.table.r2,type = “l”) legend(0.026,48,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.sigma,result.table.sigma,type = “l”,col=“red”,xlab = “표준편차(시그마)”,ylab=“콜옵션 가격”,xlim=c(0.05,0.40),ylim=c(10,50)) lines(sample.sigma,result.table.sigma2,type = “l”) legend(0.32,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.StrikePrice,result.table.StrikePrice,type = “l”,col=“red”,xlab = “행사가격”,ylab=“콜옵션 가격”,xlim=c(75,125),ylim=c(10,50)) lines(sample.StrikePrice,result.table.StrikePrice2) legend(114,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nNPV Function with Tax (Monte carlo Simulation)\nInitial Investment = ICASHFLOW before tax = CFGrowth rate = GTax rate = T Cost of Captial = CPeriod = N\n\n\nlibrary(\"dplyr\")\n\nNPVRAM <-function(I,CF,G,T,C,N) {\n  PVCF = 0 \n  ACF= CF*(1-T)  ##After tax cash flow\n  for(i in 1:N){\n    PVCF[i]<-ACF*(1+G)^(i-1) / (1+C)^i \n  }\n  \n  sum(PVCF)-I}\n\n### Monte Function ###\n  \nMonte <- function(PROB,RV) {if(PROB<=0.25){\n    return(RV[1])}\n    else if(PROB<=0.75) {\n      return(RV[2])\n    }\n    else  { \n      return(RV[3])\n    }}      \n\n  \n\nNPVRAM(5000000,1000000,0.03,0.25,0.06,10)\n\n\n[1] 1239103\n\nA<-c(5500000,5000000,4500000)\nB<-c(900000,1000000,1100000)\nC<-c(0.02,0.03,0.04)\nD<-c(0.35,0.25,0.15)\nE<-c(0.07,0.06,0.05)\nF<-c(8,10,12)\n\n\nResult<-0\n\n\n### NPVMONTE function ###\n\n\nNPVMONTE <- function(x) {\n          \n                            NPV1<-c(1:x)  \n            for(i in 1:x){\n                       \n                         I1<-Monte(runif(1),A)\n                         CF1<-Monte(runif(1),B)\n                         G1<-Monte(runif(1),C)\n                         T1<-Monte(runif(1),D)\n                         C1<-Monte(runif(1),E)\n                         N1<-Monte(runif(1),F)\n      NPV1[i] <- NPVRAM(I1,CF1,G1,T1,C1,N1)                   \n      }\n return(NPV1) \n}\n\nResult1<-NPVMONTE(10000)\nmean(Result1)  ## NPV ???հ?\n\n\n[1] 1224460\n\nvar(Result1)   ## NPV var ??\n\n\n[1] 1.331364e+12\n\nResult1<-as.data.frame(Result1)\ncolnames(Result1) <- \"NPV\"\nResult1<-arrange(Result1,NPV)\nPositive<- filter(Result1,NPV>0)  \nnrow(Positive)/nrow(Result1)     ## NPV ?? ?????? Ȯ?? ##\n\n\n[1] 0.8519\n\nAM<- filter(Result1,NPV>1000000) ## Above  1Million\nBM<- filter(Result1,NPV<1000000) ## Below  1Million\nnrow(AM)/nrow(Result1)   ## NPV 1,000,000 ?ʰ??? Ȯ??\n\n\n[1] 0.5492\n\nnrow(BM)/nrow(Result1)   ## NPV 1,000,000 ?̸??? Ȯ??\n\n\n[1] 0.4508\n\nResult1[100,1]   ## 1  percentile ##\n\n\n[1] -1091259\n\nResult1[1000,1]  ## 10 percentile ##\n\n\n[1] -209591.2\n\nResult1[9000,1]  ## 90 percentile ##\n\n\n[1] 2786013\n\n\n\n\n",
      "last_modified": "2021-03-02T05:56:36+00:00"
    },
    {
      "path": "TS.html",
      "title": "Time Series",
      "author": [],
      "contents": "\n(None)\n\n\n\n",
      "last_modified": "2021-03-02T05:31:03+00:00"
    }
  ],
  "collections": []
}
