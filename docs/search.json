{
  "articles": [
    {
      "path": "about.html",
      "title": "Wooram Seong(성우람)",
      "author": [],
      "contents": "\n\n          \n          \n          \n          \n          Homepage\n          \n          \n          Home\n          My Info\n          Portfolio\n          \n          \n          Study Note\n           \n          ▾\n          \n          \n          Linear Regression\n          Non parametric method\n          Time series\n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          ☰\n          \n          \n      \n        \n          \n            \n              \n            \n              Wooram Seong(성우람)\n            \n            \n              \n                \n                    \n                      \n                        Naver\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Instagram\n                      \n                    \n                  \n                                    \n                    \n                      \n                        GitHub\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Email\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            \n            Self-Introduction\n            I am an actuarial student studying at Sungkyunkwan University from Korea.I’m in the second year on the way to a master’s degree.\n            I love talking about HipHop, Jazz, and DJing.\n            \n            \n            Education\n            Daejeon High School / 2009~2011\n            Sungkyunkwan University / 2013~2019\n            SGH Warsaw school of Economics / 2018 (Exchange Student)Sungkyunkwan graduate school / 2020~\n            \n            \n            I’m Traveler\n            Taiwan, China, Japan, Thailand, Indonesia, Vietnam, Spain, France, Italy, IBIZA(?_?), Poland, United Kingdom, Czech, Austria, Croatia, Hungary, Egypt\n            \n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Wooram Seong(성우람)\n            \n            \n              \n                \n                                    \n                    \n                      Naver\n                    \n                  \n                                    \n                    \n                      Instagram\n                    \n                  \n                                    \n                    \n                      GitHub\n                    \n                  \n                                    \n                    \n                      Email\n                    \n                  \n                                  \n              \n            \n            \n              \n              Self-Introduction\n              I am an actuarial student studying at Sungkyunkwan University from Korea.I’m in the second year on the way to a master’s degree.\n              I love talking about HipHop, Jazz, and DJing.\n              \n              \n              Education\n              Daejeon High School / 2009~2011\n              Sungkyunkwan University / 2013~2019\n              SGH Warsaw school of Economics / 2018 (Exchange Student)Sungkyunkwan graduate school / 2020~\n              \n              \n              I’m Traveler\n              Taiwan, China, Japan, Thailand, Indonesia, Vietnam, Spain, France, Italy, IBIZA(?_?), Poland, United Kingdom, Czech, Austria, Croatia, Hungary, Egypt\n              \n            \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2021-03-02T05:42:50+00:00"
    },
    {
      "path": "citations.html",
      "title": "Rammon's Portfolio",
      "author": [],
      "contents": "\nBermuda Option\nCase <- 100 시나리오 갯수Ini.Stock<-100 초기 주가StrikePrice<-100 옵션 행사 가격year<- 10 년도unit<- 12 단위 (12: 12개월, 365, 365일)interval <- year X unit (구간의 갯수)t <- 1/unit 년도를 구간으로 나눠준 수  r <-0.03sigma<-0.2mu <- r-0.5 X sigma^2Bermuda.Start <- 50Bermuda.End <- 110 버뮤다의 마지막 구간은 interval과 같거나 작아야함.\n\n\nBermuda_option <-function(CallorPut,Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (CallorPut == 1){  \n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n      }}} else if (CallorPut == 2){\n        for (i in 1:Case) {\n          for (j in 1:interval) {\n            \n            Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n            Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n          }}} else { print(\"Call =1 , Put =2 로 설정해주셔야 합니다.\")\n          }\n  \n  \n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) { \n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])\n      \n    }  \n    value<-mean(Bermuda.table[,1])\n  }  else {value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\n\n\n\nBermuda_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \nset.seed(5)\n\nrnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n\nYield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\nPayoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\nBermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n\nif (Bermuda.End>0 & Bermuda.End<=interval){\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n  value<-mean(Bermuda.table[,1])\n} else {\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }}\n  value<-mean(Payoff.table[,interval])\n}\n\n\nreturn(value)\n}\n\nBermuda_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }\n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n    value<-mean(Bermuda.table[,1])\n  } else {\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }}\n    value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\nEuropean_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n\n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nEuropean_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n  \n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nBermuda_option(3,100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] \"Call =1 , Put =2 로 설정해주셔야 합니다.\"\n[1] 0\n\nBermuda_option(2,100,100,100,5,12,0.02,0.1,0,0)\n\n\n[1] 2.920645\n\nBermuda_option(1,100,100,80,5,12,0.03,0.1,0,0)\n\n\n[1] 33.56165\n\nBermuda_callop(100,100,80,5,12,0.02,0.2,20,40)\n\n\n[1] 54.56337\n\nBermuda_putop(100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] 4.413762\n\nEuropean_callop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 11.41853\n\nEuropean_putop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 4.413762\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\nIf you want to get the plots about bermuda options, Write this down.\nresult.table.r<-c(1:100) result.table.sigma<-c(1:100) result.table.StrikePrice<-c(1:100) result.table.r2<-c(1:100) result.table.sigma2<-c(1:100) result.table.StrikePrice2<-c(1:100) sample.r<- seq(0.01,0.03,length.out = 100) sample.sigma<-seq(0.1,0.3,length.out = 100) sample.StrikePrice<-seq(80,120,length.out = 100)\nfor (i in 1:100) { result.table.r[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,20,40) result.table.sigma[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],20,40) result.table.StrikePrice[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,20,40) result.table.r2[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,0,0) result.table.sigma2[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],0,0) result.table.StrikePrice2[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,0,0)\n}\nplot(sample.r,result.table.r,type = “l”,col=“red”,xlab = “무위험이자율”,ylab=“콜옵션 가격”,xlim=c(0.009,0.031),ylim=c(10,50)) lines(sample.r,result.table.r2,type = “l”) legend(0.026,48,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.sigma,result.table.sigma,type = “l”,col=“red”,xlab = “표준편차(시그마)”,ylab=“콜옵션 가격”,xlim=c(0.05,0.40),ylim=c(10,50)) lines(sample.sigma,result.table.sigma2,type = “l”) legend(0.32,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.StrikePrice,result.table.StrikePrice,type = “l”,col=“red”,xlab = “행사가격”,ylab=“콜옵션 가격”,xlim=c(75,125),ylim=c(10,50)) lines(sample.StrikePrice,result.table.StrikePrice2) legend(114,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nNPV Function with Tax (Monte carlo Simulation)\nInitial Investment = ICASHFLOW before tax = CFGrowth rate = GTax rate = T Cost of Captial = CPeriod = N\n\n\nlibrary(\"dplyr\")\n\nNPVRAM <-function(I,CF,G,T,C,N) {\n  PVCF = 0 \n  ACF= CF*(1-T)  ##After tax cash flow\n  for(i in 1:N){\n    PVCF[i]<-ACF*(1+G)^(i-1) / (1+C)^i \n  }\n  \n  sum(PVCF)-I}\n\n### Monte Function ###\n  \nMonte <- function(PROB,RV) {if(PROB<=0.25){\n    return(RV[1])}\n    else if(PROB<=0.75) {\n      return(RV[2])\n    }\n    else  { \n      return(RV[3])\n    }}      \n\n  \n\nNPVRAM(5000000,1000000,0.03,0.25,0.06,10)\n\n\n[1] 1239103\n\nA<-c(5500000,5000000,4500000)\nB<-c(900000,1000000,1100000)\nC<-c(0.02,0.03,0.04)\nD<-c(0.35,0.25,0.15)\nE<-c(0.07,0.06,0.05)\nF<-c(8,10,12)\n\n\nResult<-0\n\n\n### NPVMONTE function ###\n\n\nNPVMONTE <- function(x) {\n          \n                            NPV1<-c(1:x)  \n            for(i in 1:x){\n                       \n                         I1<-Monte(runif(1),A)\n                         CF1<-Monte(runif(1),B)\n                         G1<-Monte(runif(1),C)\n                         T1<-Monte(runif(1),D)\n                         C1<-Monte(runif(1),E)\n                         N1<-Monte(runif(1),F)\n      NPV1[i] <- NPVRAM(I1,CF1,G1,T1,C1,N1)                   \n      }\n return(NPV1) \n}\n\nResult1<-NPVMONTE(10000)\nmean(Result1)  ## NPV ???հ?\n\n\n[1] 1224460\n\nvar(Result1)   ## NPV var ??\n\n\n[1] 1.331364e+12\n\nResult1<-as.data.frame(Result1)\ncolnames(Result1) <- \"NPV\"\nResult1<-arrange(Result1,NPV)\nPositive<- filter(Result1,NPV>0)  \nnrow(Positive)/nrow(Result1)     ## NPV ?? ?????? Ȯ?? ##\n\n\n[1] 0.8519\n\nAM<- filter(Result1,NPV>1000000) ## Above  1Million\nBM<- filter(Result1,NPV<1000000) ## Below  1Million\nnrow(AM)/nrow(Result1)   ## NPV 1,000,000 ?ʰ??? Ȯ??\n\n\n[1] 0.5492\n\nnrow(BM)/nrow(Result1)   ## NPV 1,000,000 ?̸??? Ȯ??\n\n\n[1] 0.4508\n\nResult1[100,1]   ## 1  percentile ##\n\n\n[1] -1091259\n\nResult1[1000,1]  ## 10 percentile ##\n\n\n[1] -209591.2\n\nResult1[9000,1]  ## 90 percentile ##\n\n\n[1] 2786013\n\n\n\n\n",
      "last_modified": "2021-03-02T05:56:36+00:00"
    },
    {
      "path": "index.html",
      "title": "Rammon's Github",
      "description": "Welcome to my website. I hope you enjoy it!",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-03-02T05:41:21+00:00"
    },
    {
      "path": "LR.html",
      "title": "Linear Regression",
      "author": [],
      "contents": "\nNone\n\n\n\n",
      "last_modified": "2021-03-02T05:30:26+00:00"
    },
    {
      "path": "NPM.html",
      "title": "Non-parametric method",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-03-02T05:27:42+00:00"
    },
    {
      "path": "portfolio.html",
      "title": "Rammon's Portfolio",
      "author": [],
      "contents": "\nBermuda Option\nCase <- 100 시나리오 갯수Ini.Stock<-100 초기 주가StrikePrice<-100 옵션 행사 가격year<- 10 년도unit<- 12 단위 (12: 12개월, 365, 365일)interval <- year X unit (구간의 갯수)t <- 1/unit 년도를 구간으로 나눠준 수  r <-0.03sigma<-0.2mu <- r-0.5 X sigma^2Bermuda.Start <- 50Bermuda.End <- 110 버뮤다의 마지막 구간은 interval과 같거나 작아야함.\n\n\nBermuda_option <-function(CallorPut,Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (CallorPut == 1){  \n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n      }}} else if (CallorPut == 2){\n        for (i in 1:Case) {\n          for (j in 1:interval) {\n            \n            Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n            Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n          }}} else { print(\"Call =1 , Put =2 로 설정해주셔야 합니다.\")\n          }\n  \n  \n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) { \n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])\n      \n    }  \n    value<-mean(Bermuda.table[,1])\n  }  else {value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\n\n\n\nBermuda_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \nset.seed(5)\n\nrnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n\nYield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\nPayoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\nBermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n\nif (Bermuda.End>0 & Bermuda.End<=interval){\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n  value<-mean(Bermuda.table[,1])\n} else {\n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }}\n  value<-mean(Payoff.table[,interval])\n}\n\n\nreturn(value)\n}\n\nBermuda_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma,Bermuda.Start,Bermuda.End){\n  interval <- year * unit\n  t <- 1/unit\n  mu <- r-0.5*sigma^2\n  \n  set.seed(5)\n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  Bermuda.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  if (Bermuda.End>0 & Bermuda.End<=interval){\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }\n      Bermuda.table[i,1]<-max(Payoff.table[i,Bermuda.Start:Bermuda.End],Payoff.table[i,interval])} \n    value<-mean(Bermuda.table[,1])\n  } else {\n    for (i in 1:Case) {\n      for (j in 1:interval) {\n        \n        Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n        Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n      }}\n    value<-mean(Payoff.table[,interval])\n  }\n  \n  \n  return(value)\n}\n\n\nEuropean_callop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n\n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,Ini.Stock*exp(Yield.table[i,j+1])-StrikePrice)  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nEuropean_putop <-function(Case,Ini.Stock,StrikePrice,year,unit,r,sigma){\n  \n  \n  interval <- year * unit\n  t <- year/interval\n  mu <- r-0.5*sigma^2\n  set.seed(5)\n  #시뮬레이션 난수 값을 고정시키려면 set.seed(10) <10은 page와 같음> 10페이지에 있는 난수값. \n  \n  rnd.num <- as.data.frame(matrix(rnorm(Case*interval), nrow = Case, ncol=interval))\n  \n  Yield.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval+1))\n  Payoff.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = interval))\n  European.table <- as.data.frame(matrix(data = 0, nrow = Case, ncol = 1))\n  \n  for (i in 1:Case) {\n    for (j in 1:interval) {\n      \n      Yield.table[i,j+1] <-  Yield.table[i,j] + (mu*t+(sigma*sqrt(t)*rnd.num[i,j]))\n      Payoff.table[i,j]  <-  exp(-r*j/unit)*max(0,StrikePrice-Ini.Stock*exp(Yield.table[i,j+1]))  \n    }\n    European.table[i,1]<-Payoff.table[i,interval]\n  }\n  \n  value<-mean(European.table[,1])\n  \n  return(value)\n}\n\nBermuda_option(3,100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] \"Call =1 , Put =2 로 설정해주셔야 합니다.\"\n[1] 0\n\nBermuda_option(2,100,100,100,5,12,0.02,0.1,0,0)\n\n\n[1] 2.920645\n\nBermuda_option(1,100,100,80,5,12,0.03,0.1,0,0)\n\n\n[1] 33.56165\n\nBermuda_callop(100,100,80,5,12,0.02,0.2,20,40)\n\n\n[1] 54.56337\n\nBermuda_putop(100,100,100,5,12,0.01,0.1,0,0)\n\n\n[1] 4.413762\n\nEuropean_callop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 11.41853\n\nEuropean_putop(100,100,100,5,12,0.01,0.1)\n\n\n[1] 4.413762\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\nIf you want to get the plots about bermuda options, Write this down.\nresult.table.r<-c(1:100) result.table.sigma<-c(1:100) result.table.StrikePrice<-c(1:100) result.table.r2<-c(1:100) result.table.sigma2<-c(1:100) result.table.StrikePrice2<-c(1:100) sample.r<- seq(0.01,0.03,length.out = 100) sample.sigma<-seq(0.1,0.3,length.out = 100) sample.StrikePrice<-seq(80,120,length.out = 100)\nfor (i in 1:100) { result.table.r[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,20,40) result.table.sigma[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],20,40) result.table.StrikePrice[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,20,40) result.table.r2[i]<-Bermuda_option(1,100,100,100,5,12,sample.r[i],0.2,0,0) result.table.sigma2[i]<-Bermuda_option(1,100,100,100,5,12,0.02,sample.sigma[i],0,0) result.table.StrikePrice2[i]<-Bermuda_option(1,100,100,sample.StrikePrice[i],5,12,0.02,0.2,0,0)\n}\nplot(sample.r,result.table.r,type = “l”,col=“red”,xlab = “무위험이자율”,ylab=“콜옵션 가격”,xlim=c(0.009,0.031),ylim=c(10,50)) lines(sample.r,result.table.r2,type = “l”) legend(0.026,48,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.sigma,result.table.sigma,type = “l”,col=“red”,xlab = “표준편차(시그마)”,ylab=“콜옵션 가격”,xlim=c(0.05,0.40),ylim=c(10,50)) lines(sample.sigma,result.table.sigma2,type = “l”) legend(0.32,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nplot(sample.StrikePrice,result.table.StrikePrice,type = “l”,col=“red”,xlab = “행사가격”,ylab=“콜옵션 가격”,xlim=c(75,125),ylim=c(10,50)) lines(sample.StrikePrice,result.table.StrikePrice2) legend(114,49,c(“European”,“Bermuda”),col=c(“black”,“red”),lty=1,cex=0.9)\nNPV Function with Tax (Monte carlo Simulation)\nInitial Investment = ICASHFLOW before tax = CFGrowth rate = GTax rate = T Cost of Captial = CPeriod = N\n\n\nlibrary(\"dplyr\")\n\nNPVRAM <-function(I,CF,G,T,C,N) {\n  PVCF = 0 \n  ACF= CF*(1-T)  ##After tax cash flow\n  for(i in 1:N){\n    PVCF[i]<-ACF*(1+G)^(i-1) / (1+C)^i \n  }\n  \n  sum(PVCF)-I}\n\n### Monte Function ###\n  \nMonte <- function(PROB,RV) {if(PROB<=0.25){\n    return(RV[1])}\n    else if(PROB<=0.75) {\n      return(RV[2])\n    }\n    else  { \n      return(RV[3])\n    }}      \n\n  \n\nNPVRAM(5000000,1000000,0.03,0.25,0.06,10)\n\n\n[1] 1239103\n\nA<-c(5500000,5000000,4500000)\nB<-c(900000,1000000,1100000)\nC<-c(0.02,0.03,0.04)\nD<-c(0.35,0.25,0.15)\nE<-c(0.07,0.06,0.05)\nF<-c(8,10,12)\n\n\nResult<-0\n\n\n### NPVMONTE function ###\n\n\nNPVMONTE <- function(x) {\n          \n                            NPV1<-c(1:x)  \n            for(i in 1:x){\n                       \n                         I1<-Monte(runif(1),A)\n                         CF1<-Monte(runif(1),B)\n                         G1<-Monte(runif(1),C)\n                         T1<-Monte(runif(1),D)\n                         C1<-Monte(runif(1),E)\n                         N1<-Monte(runif(1),F)\n      NPV1[i] <- NPVRAM(I1,CF1,G1,T1,C1,N1)                   \n      }\n return(NPV1) \n}\n\nResult1<-NPVMONTE(10000)\nmean(Result1)  ## NPV ???հ?\n\n\n[1] 1224460\n\nvar(Result1)   ## NPV var ??\n\n\n[1] 1.331364e+12\n\nResult1<-as.data.frame(Result1)\ncolnames(Result1) <- \"NPV\"\nResult1<-arrange(Result1,NPV)\nPositive<- filter(Result1,NPV>0)  \nnrow(Positive)/nrow(Result1)     ## NPV ?? ?????? Ȯ?? ##\n\n\n[1] 0.8519\n\nAM<- filter(Result1,NPV>1000000) ## Above  1Million\nBM<- filter(Result1,NPV<1000000) ## Below  1Million\nnrow(AM)/nrow(Result1)   ## NPV 1,000,000 ?ʰ??? Ȯ??\n\n\n[1] 0.5492\n\nnrow(BM)/nrow(Result1)   ## NPV 1,000,000 ?̸??? Ȯ??\n\n\n[1] 0.4508\n\nResult1[100,1]   ## 1  percentile ##\n\n\n[1] -1091259\n\nResult1[1000,1]  ## 10 percentile ##\n\n\n[1] -209591.2\n\nResult1[9000,1]  ## 90 percentile ##\n\n\n[1] 2786013\n\n\n\n\n",
      "last_modified": "2021-03-02T05:56:36+00:00"
    },
    {
      "path": "TS.html",
      "title": "Time Series",
      "author": [],
      "contents": "\n(None)\n\n\n\n",
      "last_modified": "2021-03-02T05:31:03+00:00"
    }
  ],
  "collections": []
}
